import logging
from pathlib import Path

from cve_bin_tool.log import LOGGER

# This downgrades a message during module loading.
if True:  # Unusual construction for PEP 8 compliance.
    logging.getLogger("xmlschema").setLevel(logging.WARNING)
    import xmlschema


def _validate_xml(filename, xsd_file):
    """
    Validates an XML file against a specified XSD schema.

    Args:
        filename (str): The path to the XML file to be validated.
        xsd_file (str): The filename of the XSD schema to validate against.

    Returns:
        bool: True if the XML file is valid against the schema, False otherwise.
    """
    # Resolve the folder where schemas are located.
    schemas_file = Path(__file__).resolve().parent / "schemas" / xsd_file
    the_schema = xmlschema.XMLSchema(Path(schemas_file))

    LOGGER.debug(f"Validating {filename} against the schema in {schemas_file}")
    try:
        result = the_schema.validate(filename)
    except Exception as e:
        LOGGER.debug(f"Failed to validate {filename} against {xsd_file}. Exception {e}")
        result = False
    return result is None


def validate_spdx(filename):
    """
    Validates an SPDX XML file against the SPDX schema.

    Args:
        filename (str): The path to the SPDX XML file.

    Returns:
        bool: True if the SPDX XML file is valid against the SPDX schema, False otherwise.
    """
    SPDX_SCHEMA = "spdx.xsd"
    return _validate_xml(filename, SPDX_SCHEMA)


def validate_cyclonedx(filename):
    """
    Validates a CycloneDX XML file against the CycloneDX schema.

    Args:
        filename (str): The path to the CycloneDX XML file.

    Returns:
        bool: True if the CycloneDX XML file is valid against the CycloneDX schema, False otherwise.
    """
    CYCLONEDX_SCHEMA = "cyclonedx_gen.xsd"
    return _validate_xml(filename, CYCLONEDX_SCHEMA)


def validate_swid(filename):
    """
    Validates a SWID XML file against the SWID schema.

    Args:
        filename (str): The path to the SWID XML file.

    Returns:
        bool: True if the SWID XML file is valid against the SWID schema, False otherwise.
    """
    SWID_SCHEMA = "swid_gen.xsd"
    return _validate_xml(filename, SWID_SCHEMA)


def validate_pom(filename):
    """
    Validates a POM XML file against the POM schema.

    Args:
        filename (str): The path to the POM XML file.

    Returns:
        bool: True if the POM XML file is valid against the POM schema, False otherwise.
    """
    POM_SCHEMA = "pom.xsd"
    return _validate_xml(filename, POM_SCHEMA)
